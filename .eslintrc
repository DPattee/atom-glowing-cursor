{
    "parser": "babel-eslint",          // https://github.com/babel/babel-eslint,
    "env": {
        "browser": true
    },
    "plugins": [
    ],
    "globals": {
        "$glUtils": true,
        "$Text": true,
        "$CurveAnimator": true,
        "$Event": true,
        "$EventType": true,
        "$EventFamily": true,
        "$EventPackage": true,
        "$View": true,
        "$E": true,
        "$locale": true,
        "$config": true,
        "$AssetControl": true,
        "$frameController": true,
        "$ApplicationModuleBase": true
    },
    "rules" : {
        "indent": [2, 4, {"SwitchCase": 1}], // use 4 spaces for a tab, and indent the cases in switches
        "curly": [2, "all"], // always enforce curly braces
        "quotes": [0], // always use single quotes
        "no-undef": [2], // don't use undefined variables
        "no-undef-init": [2], // don't allow variables to be initialized to undefined
        "semi": [2, "always"], // always use semicolons
        "no-use-before-define": [0], // allow using a function before it is defined
        "no-multi-spaces": [0], // allow spaces for alignment
        "new-cap": [0], // Constructors are CamelCaps (can't use this because $)
        "eol-last": [2], // enforce a single newline at the end of the file
        "no-unused-vars": [0, {"vars": "local", "args": "none"}], // can have unused vars (our singletons are often this way)
        "no-mixed-spaces-and-tabs": [2, true], // always use spaces
        "valid-typeof": [2], // always make sure you use a string for "typeof"
        "brace-style": [2, "1tbs", { "allowSingleLine": false }], // braces on same line; don't allow single-line blocks
        "camelcase": [2], // use camelCase or CamelCaps or CONSTANT_CASE
        "no-underscore-dangle": [0], // allow underscores before/after variable names
        "strict": [0], // all functions should run in strict mode
        "vars-on-top": [0], // declare "var"s at the top of the function
        "one-var": [0], // can declare with multiple var statements
        "func-style": [2, "declaration"], // prefer "function name() {...}" over "var name = function() {...};"
        "no-func-assign": [2], // don't re-assign a function that was written as a function exclaration (expressions are ok)
        "no-inner-declarations": [2, "functions"], // don't allow function declarations in if statements; assigning expressions is still ok
        "eqeqeq": [2, "smart"], // always use === or !== (unless comparing null or typeof)
        "no-eq-null": [0], // test == null is the fastest boolean cast operation we have on the box, so we should be able to use it
        "no-delete-var": [2], // only object properties should be deleted, variables should be left for garbage collection
        "no-shadow": [0], // prevent variables in external scope being redeclared in internal scopes (this is off because we do it a LOT)
        "no-undefined": [0], // don't allow changing the value of undefined
        "func-names": [0], // don't require function expressions to have names
        "max-nested-callbacks": [0, 10], // maximum number of nested callbacks
        "no-array-constructor": [2], // don't use Array to construct arrays (except if specifying initial array length)
        "no-inline-comments": [0], // don't allow inline comments (like this one)
        "no-multiple-empty-lines": [0], // allow multiple empty lines, vertical whitespace can help visually
        "space-after-keywords": [2, "always"], // require a space after keywords including function
        "object-curly-spacing": [2, "never"], // never add spaces at the opening/closing brackets
        "array-bracket-spacing": [2, "never"], // never add spaces at the opening/closing brackets
        "space-in-parens": [2, "never"], // never add a space at the beginning and end of parentheses
        "comma-spacing": [2, {"after": true}], // always space after a comma
        "space-unary-ops": [2, {"words": true, "nonwords": false}],

        /* Things that can cause errors */
        "space-before-blocks": [2, "always"], // always require a space before a block
        "space-after-function-name": [0, "never"], // never add a space after the function name
        "no-dupe-keys": [2], // don't use the same key in an object declaration
        "use-isnan": [2], // use isNaN to look for NaN
        "no-redeclare": [2], // don't redeclare a variable inside the same function scope
        "no-alert": [2], // don't use "alert", "prompt", "confirm"
        "no-console": [0], // for production ready code, we should remove all console output, use $Debugger if you want to leave your debug code where it is
        "no-debugger": [1], // it's OK to use this for dev, but never leave this in when you commit
        "no-with": [2], // don't use "with" statement
        "consistent-return": [1], // in a function all "return" statements have value or all have no value
        "no-negated-in-lhs": [2], // don't do "if (!a in b) {" it doesn't do what you expect
        "no-script-url": [2], // don't use "javascript:" urls
        "no-native-reassign": [2], // don't re-assign native objects
        "no-return-assign": [2], // don't assign and return in a single statement
        "comma-dangle": [2, "never"], // don't add a trailing comma to an array/object declaration
        "no-constant-condition": [1], // don't do "if (true) {"
        "no-control-regex": [2], // don't use control characters in regex
        "no-empty-character-class": [2], // don't use empty character classes in regex
        "no-ex-assign": [2], // don't re-assign caught exceptions
        "no-extra-boolean-cast": [1], // don't unecessarily use "!!" to cast to boolean (ok when assigning/returning, not when testing)
        "no-extra-parens": [2, "functions"], // allow extra parentheses to make order of operations more obvious
        "no-invalid-regexp": [2], // don't allow improper declaration of regular expressions
        "no-irregular-whitespace": [2], // don't use irregular whitespace characters
        "no-obj-calls": [2], // don't use Math as a function
        "no-regex-spaces": [1], // don't allow multiple spaces in regex statements (specify a number like {3} instead)
        "no-sparse-arrays": [2], // don't allow arrays to be declared with empty spaces (like [1,,2])
        "no-unreachable": [1], // don't allow unreachable code after return statements
        "guard-for-in": [1], // always check properties in for-in loops,
        "no-caller": [2], // don't use arguments.caller or arguments.callee (this can cause issues between strict and non-strict code)
        "no-div-regex": [2], // dont do this "/=regex/" this looks like a division operation
        "no-eval": [2], // don't EVER use eval
        "no-implied-eval": [2], // don't call setTimeout/setInterval with a string value
        "no-extend-native": [2], // don't extend native object prototypes
        "no-fallthrough": [1], // don't allow fallthrough in switch cases (unless there's a comment explaining that it's deliberate)
        "no-shadow-restricted-names": [2], // don't create variables that share names with reserved words
        "no-ternary": [0], // allow ternaries
        "no-nested-ternary": [2], // dont chain/nest ternaries, it's confusing
        "no-cond-assign": [2, "except-parens"], // don't assign in a condition (unless you add extra parameters around it to say it was intended)
        "new-parens": [2], // require parentheses when creating objects from constructors
        "no-self-compare": [2], // don't compare x === x, use isNaN if that's what you're looking for
        "no-labels": [2], // don't use labels (used to jump out of multiple loops with break/continue)
        "no-unused-expressions": [2], // don't do empty expressions ("unused";)
        "no-new-func": [2], // don't create a function via "new Function"

        /* Other nice to haves */
        "sort-vars": [0, {"ignoreCase": true}], // sort variable declarations by name
        "padded-blocks": [1, "never"], // never have space at the beginning or end of a block
        "quote-props": [1, "as-needed"], // object properties should always be defined as strings (currently off)
        "operator-assignment": [0, "always"], // always use a += 2 instead of a = a + 2 (currently off)
        "dot-notation": [0], // use dot notation instead of square bracket notation where possible
        "comma-style": [1, "last"], // Commas at the end of the line instead of the beginning
        "space-infix-ops": [1], // space around operators (like +, -, =, ?, :, etc.)
        "key-spacing": [1, {"beforeColon": false, "afterColon": true}], // make sure we have a space after the colon in object declarations
        "no-empty": [0], // allow empty functions
        "no-extra-semi": [1], // only 1 semicolon per statement
        "no-lonely-if": [1], // don't have an if on it's own inside an else, make an else if instead
        "no empty-label": [0, true], // and definitely don't use labels on empty loops
        "no-label-car": [0, true], // certainly don't use a label that has the same name as a variable (seriously don't use labels)
        "no-floating-decimal": [1], // don't do this ".1" or "1.", instead do this "0.1" or "1.0"
        "no-extra-bind": [1], // don't bind when the values are not used
        "valid-jsdoc": [1, {
            "prefer": {
                "return": "returns"
            },
            "requireReturn": false,
            "requireParamDescription": false
        }], // if you're going to use JSDoc, do it right (this doesn't require JSDoc on all functions)
        "consistent-this": [0, "self"], // assign this to self and explicitly use self instead

        /* Other */
        "complexity": [0, 5], // maximum cyclomatic complexity of a function (currently off)
        "block-scoped-var": [0], // vars are function scoped
        "no-catch-shadow": [2], // don't reuse the name of the catch errors
        "semi-spacing": [1,{"before": false, "after": true}], // don't allow spaces before semicolons
        "no-spaced-func": [1], // don't put a space between function and ()
        "no-trailing-spaces": [1], // don't leave trailing spaces on a line
        "space-return-throw-case": [1], // don't do this "return-1;" instead do "return -1;"
        "no-lone-blocks": [1], // don't declare a block for no reason
        "no-loop-func": [2], // don't declare functions in loops (you can declare outside and bind instead)
        "no-multi-str": [2], // don't use multi-line strings (use joined arrays or concatenate strings instead)
        "default-case": [0], // don't require "default" in switch statements
        "no-else-return": [1], // don't put return in an else
        "no-new": [2], // don't call "new" without assigning to a variable
        "no-new-wrappers": [2], // don't create primitives like (new String("test")) it's still okay to make a clone of a string variable that way though
        "no-new-object": [2], // don't create object via new Object
        "no-octal": [2], // don't use octals (071  !== 71)
        "no-octal-escape": [2], // don't use octal escapes in strings for special characters
        "no-proto": [2], // don't use __proto__
        "no-iterator": [1], // don't use __iterator__,
        "no-sequences": [2], // don't use sequences to combine actions, use semi-colons (but it's still ok when declaring multiple vars together)
        "no-void": [1], // don't use void operator (just refer to null instead; it's faster),
        "no-warning-comments": [1, {
            "terms": [
                "todo",
                "fixme",
                "hack",
                "issue"
            ],
            "location": "start"
        }], // no TODO or FIXME comments
        "radix": [0], // require radix on parseInt (don't assume it'll be 10)
        "wrap-iife": [2, "any"], // wrap immediate invocations of function expression
        "yoda": [0, "never"], // yoda conditions put the test value on the left to prevent accidental assignments "if (1 = a)" will throw and error while "if (a = 1)" will not
        "spaced-line-comment": [0, "always"], // add a space after "//" in inline comments
        "wrap-regex": [0], // require regex shorthand to be wrapped in parentheses (currently off)


        /* ES6 */
        "no-var": [0], // use "let" or "const" instead of "var" (currently off)
        "generator-star": [0, "start"], // require the asterisk to dangle off of "function" for generators (currently off)


        // Node.js things
        //"no-process-env": [0, true], // this is only an issue for Node.JS environments
        //"handle-callback-err": [0, true],
        //"no-mixed-requires": [0, true],
        //"no-path-concat": [0, true],
        //"no-process-exit": [0, true],
        //"no-restricted-modules": [0, true],
        //"no-sync": [0, true]
    }
}
